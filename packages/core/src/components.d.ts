/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AutocompleteTypes, DateDisabledPredicate, GrDatePickerChangeEvent, GrDatePickerDirection, TextFieldTypes } from "./interface";
import { DaysOfWeek } from "./enums";
import { localization } from "./components/date-picker/date-localization";
import { RadioGroupChangeEventDetail } from "./components/radio-group/radio-group-interface";
export namespace Components {
    interface GrButton {
        /**
          * Set to true to draw the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret": boolean;
        /**
          * Set to true to draw a circle button.
         */
        "circle": boolean;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to.
         */
        "href": string | undefined;
        /**
          * Set to true to draw the button in a loading state.
         */
        "loading": boolean;
        /**
          * Set to true to draw a pill-style button with rounded edges.
         */
        "pill": boolean;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * Removes focus from the button.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the button.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Specifies where to display the linked URL. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
        /**
          * The different variants. The options are: `"default"`, `"primary"`, `"secondary"`, `"danger"`, and `"plain"`.
         */
        "variant"?: 'default' | 'primary' | 'secondary' | 'danger' | 'plain';
    }
    interface GrCheckbox {
        /**
          * The checkbox's alignment.
         */
        "alignment": 'top' | 'center' | 'bottom';
        /**
          * Set to true to draw the checkbox in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to disable the checkbox.
         */
        "disabled": boolean;
        /**
          * Set to true to draw the checkbox in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text.
         */
        "invalid": boolean;
        /**
          * The radio group's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Removes focus from the checkbox.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the checkbox.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The checkbox's value attribute.
         */
        "value": string;
    }
    interface GrDatePicker {
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction": GrDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek": DaysOfWeek;
        /**
          * The date picker's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus returning to the date picker's button. Default is true.
         */
        "hide": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid": boolean;
        /**
          * The date picker's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText": string;
        /**
          * Controls which days are disabled and therefore disallowed. For example, this can be used to disallow selection of weekends.
         */
        "isDateDisabled": DateDisabledPredicate;
        /**
          * The date picker's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * Specify date picker's localization. Can be used if localization is not supported internally. If not specified, defaulted to use the browser's localization and if not supported, defaulted to english.
         */
        "localization": localization;
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max": string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min": string;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * The date picker input's placeholder text.
         */
        "placeholder": string;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator": boolean;
        /**
          * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Show the calendar modal, moving focus to the calendar inside.
         */
        "show": () => Promise<void>;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value": string;
    }
    interface GrDropdown {
        /**
          * Determines whether the dropdown should hide when a menu item is selected.
         */
        "closeOnSelect": boolean;
        /**
          * The dropdown will close when the user interacts outside of this element (e.g. clicking).
         */
        "containingElement": HTMLElement;
        /**
          * The distance in pixels from which to offset the panel away from its trigger.
         */
        "distance": number;
        /**
          * Sets focus on the trigger.
         */
        "focusOnTrigger": () => Promise<void>;
        /**
          * Hides the dropdown panel
         */
        "hide": () => Promise<void>;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel inside of the viewport.
         */
        "placement": | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * Shows the dropdown panel
         */
        "show": () => Promise<void>;
        /**
          * The distance in pixels from which to offset the panel along its trigger.
         */
        "skidding": number;
    }
    interface GrFieldGroup {
        /**
          * Render the fields horizontal instead of vertical
         */
        "horizontal": boolean;
        /**
          * The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot.
         */
        "label": string;
    }
    interface GrInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Set to true to disable the input control.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * The input's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * Set to true to hide input appearances.
         */
        "hideAppearance": boolean;
        /**
          * The input's inputmode attribute.
         */
        "inputmode": 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid": boolean;
        /**
          * The input's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText": string;
        /**
          * The inputs's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Specifies how many characters are allowed.
         */
        "maxlength": number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * The input's name.
         */
        "name": string;
        /**
          * Specifies a regular expression that the input value is checked against.
         */
        "pattern"?: string;
        /**
          * Set to true to draw a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * Removes focus from the input.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator": boolean;
        /**
          * Selects all the text in the input.
         */
        "select": () => Promise<void>;
        /**
          * Sets focus on the input.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Replaces a range of text with a new string.
         */
        "setRangeText": (replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>;
        /**
          * Sets the start and end positions of the text selection (0-based).
         */
        "setSelectionRange": (selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void>;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Set to true to add a password toggle button for password inputs.
         */
        "togglePassword": boolean;
        /**
          * The type of control to display. The default type is text.
         */
        "type": TextFieldTypes;
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface GrMenu {
        /**
          * Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing. The key passed will be appended to the internal query and the selection will be updated. After a brief period, the internal query is cleared automatically. This method is intended to be used with the keydown event. Useful for enabling type-to-select when the menu doesn't have focus.
         */
        "typeToSelect": (key: string) => Promise<void>;
    }
    interface GrMenuDivider {
    }
    interface GrMenuItem {
        /**
          * Set to true to draw the item in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to draw the menu item in a disabled state.
         */
        "disabled": boolean;
        /**
          * Removes focus from the menu item.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the menu item.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * A unique value to store in the menu item. This can be used as a way to identify menu items when selected.
         */
        "value": string;
    }
    interface GrMenuLabel {
    }
    interface GrRadio {
        /**
          * The radio's alignment attribute.
         */
        "alignment": 'top' | 'center' | 'bottom';
        /**
          * Set to true to draw the radio in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to disable the radio.
         */
        "disabled": boolean;
        /**
          * Removes focus from the radio.
         */
        "removeFocus": () => Promise<void>;
        "setButtonTabindex": (value: number) => Promise<void>;
        /**
          * Sets focus on the radio.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The radio's value attribute.
         */
        "value": string;
    }
    interface GrRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection": boolean;
        /**
          * Render the radios horizontal instead of vertical
         */
        "horizontal": boolean;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text.
         */
        "invalid": boolean;
        /**
          * The radio group's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText": string;
        /**
          * The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator": boolean;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface GrSelect {
        /**
          * Set to true to add a clear button when the select is populated.
         */
        "clearable": boolean;
        /**
          * Set to true to disable the select control.
         */
        "disabled": boolean;
        /**
          * The select's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid": boolean;
        /**
          * The select's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText": string;
        /**
          * The select's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * The maximum number of tags to show when `multiple` is true. After the maximum, "+n" will be shown to indicate the number of additional items that are selected. Set to -1 to remove the limit.
         */
        "maxTagsVisible": number;
        /**
          * Set to true to enable multiselect.
         */
        "multiple": boolean;
        /**
          * The select's name.
         */
        "name": string;
        /**
          * Set to true to draw a pill-style select with rounded edges.
         */
        "pill": boolean;
        /**
          * The select's placeholder text.
         */
        "placeholder": string;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator": boolean;
        /**
          * Sets focus on the select.
         */
        "setFocus": () => Promise<void>;
        /**
          * The select's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The value of the control. This will be a string or an array depending on `multiple`.
         */
        "value": string | Array<string>;
    }
    interface GrSpinner {
    }
    interface GrTab {
        "active": boolean;
        /**
          * Set to true to draw the tab in a disabled state.
         */
        "disabled": boolean;
        /**
          * The name of the tab panel the tab will control. The panel must be located in the same tab group.
         */
        "panel": string;
        /**
          * Removes focus from the tab.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the tab.
         */
        "setFocus": () => Promise<void>;
    }
    interface GrTabGroup {
        "placement": 'top' | 'bottom' | 'start' | 'end';
        /**
          * Set to use a popstate eventlistner, to use route navigation.
         */
        "routeNavigation": boolean;
        /**
          * The tab's size.
         */
        "tabSize": 'small' | 'medium' | 'large';
    }
    interface GrTabPanel {
        "active": boolean;
        "name": string;
    }
    interface GrTag {
        /**
          * Set to true to make the tag clearable.
         */
        "clearable": boolean;
        /**
          * Set to true to draw a pill-style tag with rounded edges.
         */
        "pill": boolean;
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The tag's title.
         */
        "title": string;
        /**
          * Set to true to make the tag truncated.
         */
        "truncate": boolean;
        /**
          * The tag's type.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface GrTextarea {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize": string;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Set to true to disable the textarea.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * The textarea's inputmode attribute.
         */
        "inputmode": 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid": boolean;
        /**
          * The input's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText": string;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label": string | undefined;
        /**
          * The number of max rows
         */
        "maxHeight": number;
        /**
          * Specifies how many characters are allowed.
         */
        "maxlength": number;
        /**
          * The textarea's name attribute.
         */
        "name": string;
        /**
          * The textarea's placeholder text.
         */
        "placeholder": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * Removes focus fromt the textarea.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator": boolean;
        /**
          * Controls how the textarea can be resized.
         */
        "resize": 'none' | 'vertical' | 'auto';
        /**
          * The number of rows to display by default.
         */
        "rows": number;
        /**
          * Selects all the text in the input.
         */
        "select": () => Promise<void>;
        /**
          * Sets focus on the textarea.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Replaces a range of text with a new string.
         */
        "setRangeText": (replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>;
        /**
          * Sets the start and end positions of the text selection (0-based).
         */
        "setSelectionRange": (selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void>;
        "setTextareaHeight": () => Promise<void>;
        /**
          * The textarea's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * The textarea's value attribute.
         */
        "value": string;
    }
}
export interface GrButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrButtonElement;
}
export interface GrCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrCheckboxElement;
}
export interface GrDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrDatePickerElement;
}
export interface GrDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrDropdownElement;
}
export interface GrInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrInputElement;
}
export interface GrMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrMenuElement;
}
export interface GrRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrRadioElement;
}
export interface GrRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrRadioGroupElement;
}
export interface GrSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrSelectElement;
}
export interface GrTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrTabElement;
}
export interface GrTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrTagElement;
}
export interface GrTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrTextareaElement;
}
declare global {
    interface HTMLGrButtonElement extends Components.GrButton, HTMLStencilElement {
    }
    var HTMLGrButtonElement: {
        prototype: HTMLGrButtonElement;
        new (): HTMLGrButtonElement;
    };
    interface HTMLGrCheckboxElement extends Components.GrCheckbox, HTMLStencilElement {
    }
    var HTMLGrCheckboxElement: {
        prototype: HTMLGrCheckboxElement;
        new (): HTMLGrCheckboxElement;
    };
    interface HTMLGrDatePickerElement extends Components.GrDatePicker, HTMLStencilElement {
    }
    var HTMLGrDatePickerElement: {
        prototype: HTMLGrDatePickerElement;
        new (): HTMLGrDatePickerElement;
    };
    interface HTMLGrDropdownElement extends Components.GrDropdown, HTMLStencilElement {
    }
    var HTMLGrDropdownElement: {
        prototype: HTMLGrDropdownElement;
        new (): HTMLGrDropdownElement;
    };
    interface HTMLGrFieldGroupElement extends Components.GrFieldGroup, HTMLStencilElement {
    }
    var HTMLGrFieldGroupElement: {
        prototype: HTMLGrFieldGroupElement;
        new (): HTMLGrFieldGroupElement;
    };
    interface HTMLGrInputElement extends Components.GrInput, HTMLStencilElement {
    }
    var HTMLGrInputElement: {
        prototype: HTMLGrInputElement;
        new (): HTMLGrInputElement;
    };
    interface HTMLGrMenuElement extends Components.GrMenu, HTMLStencilElement {
    }
    var HTMLGrMenuElement: {
        prototype: HTMLGrMenuElement;
        new (): HTMLGrMenuElement;
    };
    interface HTMLGrMenuDividerElement extends Components.GrMenuDivider, HTMLStencilElement {
    }
    var HTMLGrMenuDividerElement: {
        prototype: HTMLGrMenuDividerElement;
        new (): HTMLGrMenuDividerElement;
    };
    interface HTMLGrMenuItemElement extends Components.GrMenuItem, HTMLStencilElement {
    }
    var HTMLGrMenuItemElement: {
        prototype: HTMLGrMenuItemElement;
        new (): HTMLGrMenuItemElement;
    };
    interface HTMLGrMenuLabelElement extends Components.GrMenuLabel, HTMLStencilElement {
    }
    var HTMLGrMenuLabelElement: {
        prototype: HTMLGrMenuLabelElement;
        new (): HTMLGrMenuLabelElement;
    };
    interface HTMLGrRadioElement extends Components.GrRadio, HTMLStencilElement {
    }
    var HTMLGrRadioElement: {
        prototype: HTMLGrRadioElement;
        new (): HTMLGrRadioElement;
    };
    interface HTMLGrRadioGroupElement extends Components.GrRadioGroup, HTMLStencilElement {
    }
    var HTMLGrRadioGroupElement: {
        prototype: HTMLGrRadioGroupElement;
        new (): HTMLGrRadioGroupElement;
    };
    interface HTMLGrSelectElement extends Components.GrSelect, HTMLStencilElement {
    }
    var HTMLGrSelectElement: {
        prototype: HTMLGrSelectElement;
        new (): HTMLGrSelectElement;
    };
    interface HTMLGrSpinnerElement extends Components.GrSpinner, HTMLStencilElement {
    }
    var HTMLGrSpinnerElement: {
        prototype: HTMLGrSpinnerElement;
        new (): HTMLGrSpinnerElement;
    };
    interface HTMLGrTabElement extends Components.GrTab, HTMLStencilElement {
    }
    var HTMLGrTabElement: {
        prototype: HTMLGrTabElement;
        new (): HTMLGrTabElement;
    };
    interface HTMLGrTabGroupElement extends Components.GrTabGroup, HTMLStencilElement {
    }
    var HTMLGrTabGroupElement: {
        prototype: HTMLGrTabGroupElement;
        new (): HTMLGrTabGroupElement;
    };
    interface HTMLGrTabPanelElement extends Components.GrTabPanel, HTMLStencilElement {
    }
    var HTMLGrTabPanelElement: {
        prototype: HTMLGrTabPanelElement;
        new (): HTMLGrTabPanelElement;
    };
    interface HTMLGrTagElement extends Components.GrTag, HTMLStencilElement {
    }
    var HTMLGrTagElement: {
        prototype: HTMLGrTagElement;
        new (): HTMLGrTagElement;
    };
    interface HTMLGrTextareaElement extends Components.GrTextarea, HTMLStencilElement {
    }
    var HTMLGrTextareaElement: {
        prototype: HTMLGrTextareaElement;
        new (): HTMLGrTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "gr-button": HTMLGrButtonElement;
        "gr-checkbox": HTMLGrCheckboxElement;
        "gr-date-picker": HTMLGrDatePickerElement;
        "gr-dropdown": HTMLGrDropdownElement;
        "gr-field-group": HTMLGrFieldGroupElement;
        "gr-input": HTMLGrInputElement;
        "gr-menu": HTMLGrMenuElement;
        "gr-menu-divider": HTMLGrMenuDividerElement;
        "gr-menu-item": HTMLGrMenuItemElement;
        "gr-menu-label": HTMLGrMenuLabelElement;
        "gr-radio": HTMLGrRadioElement;
        "gr-radio-group": HTMLGrRadioGroupElement;
        "gr-select": HTMLGrSelectElement;
        "gr-spinner": HTMLGrSpinnerElement;
        "gr-tab": HTMLGrTabElement;
        "gr-tab-group": HTMLGrTabGroupElement;
        "gr-tab-panel": HTMLGrTabPanelElement;
        "gr-tag": HTMLGrTagElement;
        "gr-textarea": HTMLGrTextareaElement;
    }
}
declare namespace LocalJSX {
    interface GrButton {
        /**
          * Set to true to draw the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret"?: boolean;
        /**
          * Set to true to draw a circle button.
         */
        "circle"?: boolean;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to.
         */
        "href"?: string | undefined;
        /**
          * Set to true to draw the button in a loading state.
         */
        "loading"?: boolean;
        /**
          * Emitted when the button loses focus.
         */
        "onGr-blur"?: (event: GrButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGr-focus"?: (event: GrButtonCustomEvent<void>) => void;
        /**
          * Set to true to draw a pill-style button with rounded edges.
         */
        "pill"?: boolean;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Specifies where to display the linked URL. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
        /**
          * The different variants. The options are: `"default"`, `"primary"`, `"secondary"`, `"danger"`, and `"plain"`.
         */
        "variant"?: 'default' | 'primary' | 'secondary' | 'danger' | 'plain';
    }
    interface GrCheckbox {
        /**
          * The checkbox's alignment.
         */
        "alignment"?: 'top' | 'center' | 'bottom';
        /**
          * Set to true to draw the checkbox in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to disable the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Set to true to draw the checkbox in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text.
         */
        "invalid"?: boolean;
        /**
          * The radio group's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onGr-blur"?: (event: GrCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onGr-change"?: (event: GrCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onGr-focus"?: (event: GrCheckboxCustomEvent<void>) => void;
        /**
          * The checkbox's value attribute.
         */
        "value"?: string;
    }
    interface GrDatePicker {
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction"?: GrDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: DaysOfWeek;
        /**
          * The date picker's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid"?: boolean;
        /**
          * The date picker's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText"?: string;
        /**
          * Controls which days are disabled and therefore disallowed. For example, this can be used to disallow selection of weekends.
         */
        "isDateDisabled"?: DateDisabledPredicate;
        /**
          * The date picker's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * Specify date picker's localization. Can be used if localization is not supported internally. If not specified, defaulted to use the browser's localization and if not supported, defaulted to english.
         */
        "localization"?: localization;
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max"?: string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min"?: string;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Emitted when the date picker input loses focus.
         */
        "onGr-blur"?: (event: GrDatePickerCustomEvent<void>) => void;
        /**
          * Emitted when a date is selected.
         */
        "onGr-change"?: (event: GrDatePickerCustomEvent<GrDatePickerChangeEvent>) => void;
        /**
          * Emitted when the panel closes.
         */
        "onGr-close"?: (event: GrDatePickerCustomEvent<void>) => void;
        /**
          * Emitted when the date picker input gains focus.
         */
        "onGr-focus"?: (event: GrDatePickerCustomEvent<void>) => void;
        /**
          * Emitted when the panel opens.
         */
        "onGr-open"?: (event: GrDatePickerCustomEvent<void>) => void;
        /**
          * The date picker input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator"?: boolean;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value"?: string;
    }
    interface GrDropdown {
        /**
          * Determines whether the dropdown should hide when a menu item is selected.
         */
        "closeOnSelect"?: boolean;
        /**
          * The dropdown will close when the user interacts outside of this element (e.g. clicking).
         */
        "containingElement"?: HTMLElement;
        /**
          * The distance in pixels from which to offset the panel away from its trigger.
         */
        "distance"?: number;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Emitted after the dropdown closes and all transitions are complete.
         */
        "onGr-after-hide"?: (event: GrDropdownCustomEvent<void>) => void;
        /**
          * Emitted after the dropdown opens and all transitions are complete.
         */
        "onGr-after-show"?: (event: GrDropdownCustomEvent<void>) => void;
        /**
          * Emitted when the dropdown closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onGr-hide"?: (event: GrDropdownCustomEvent<void>) => void;
        /**
          * Emitted when the dropdown opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onGr-show"?: (event: GrDropdownCustomEvent<void>) => void;
        /**
          * Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel inside of the viewport.
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * The distance in pixels from which to offset the panel along its trigger.
         */
        "skidding"?: number;
    }
    interface GrFieldGroup {
        /**
          * Render the fields horizontal instead of vertical
         */
        "horizontal"?: boolean;
        /**
          * The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot.
         */
        "label"?: string;
    }
    interface GrInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * Set to true to disable the input control.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * The input's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * Set to true to hide input appearances.
         */
        "hideAppearance"?: boolean;
        /**
          * The input's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid"?: boolean;
        /**
          * The input's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText"?: string;
        /**
          * The inputs's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Specifies how many characters are allowed.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * The input's name.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onGr-blur"?: (event: GrInputCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onGr-change"?: (event: GrInputCustomEvent<void>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onGr-clear"?: (event: GrInputCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onGr-focus"?: (event: GrInputCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onGr-input"?: (event: GrInputCustomEvent<void>) => void;
        /**
          * Specifies a regular expression that the input value is checked against.
         */
        "pattern"?: string;
        /**
          * Set to true to draw a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Set to true to add a password toggle button for password inputs.
         */
        "togglePassword"?: boolean;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: TextFieldTypes;
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface GrMenu {
        /**
          * Emitted when a menu item is selected.
         */
        "onGr-select"?: (event: GrMenuCustomEvent<{ item: HTMLGrMenuItemElement }>) => void;
    }
    interface GrMenuDivider {
    }
    interface GrMenuItem {
        /**
          * Set to true to draw the item in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to draw the menu item in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * A unique value to store in the menu item. This can be used as a way to identify menu items when selected.
         */
        "value"?: string;
    }
    interface GrMenuLabel {
    }
    interface GrRadio {
        /**
          * The radio's alignment attribute.
         */
        "alignment"?: 'top' | 'center' | 'bottom';
        /**
          * Set to true to draw the radio in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to disable the radio.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the control loses focus.
         */
        "onGr-blur"?: (event: GrRadioCustomEvent<any>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onGr-focus"?: (event: GrRadioCustomEvent<any>) => void;
        /**
          * The radio's value attribute.
         */
        "value"?: string;
    }
    interface GrRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection"?: boolean;
        /**
          * Render the radios horizontal instead of vertical
         */
        "horizontal"?: boolean;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text.
         */
        "invalid"?: boolean;
        /**
          * The radio group's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText"?: string;
        /**
          * The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onGr-change"?: (event: GrRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator"?: boolean;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface GrSelect {
        /**
          * Set to true to add a clear button when the select is populated.
         */
        "clearable"?: boolean;
        /**
          * Set to true to disable the select control.
         */
        "disabled"?: boolean;
        /**
          * The select's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid"?: boolean;
        /**
          * The select's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText"?: string;
        /**
          * The select's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * The maximum number of tags to show when `multiple` is true. After the maximum, "+n" will be shown to indicate the number of additional items that are selected. Set to -1 to remove the limit.
         */
        "maxTagsVisible"?: number;
        /**
          * Set to true to enable multiselect.
         */
        "multiple"?: boolean;
        /**
          * The select's name.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onGr-blur"?: (event: GrSelectCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onGr-change"?: (event: GrSelectCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onGr-focus"?: (event: GrSelectCustomEvent<void>) => void;
        /**
          * Set to true to draw a pill-style select with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The select's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator"?: boolean;
        /**
          * The select's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the control. This will be a string or an array depending on `multiple`.
         */
        "value"?: string | Array<string>;
    }
    interface GrSpinner {
    }
    interface GrTab {
        "active"?: boolean;
        /**
          * Set to true to draw the tab in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the button loses focus.
         */
        "onGr-blur"?: (event: GrTabCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGr-focus"?: (event: GrTabCustomEvent<void>) => void;
        /**
          * The name of the tab panel the tab will control. The panel must be located in the same tab group.
         */
        "panel"?: string;
    }
    interface GrTabGroup {
        "placement"?: 'top' | 'bottom' | 'start' | 'end';
        /**
          * Set to use a popstate eventlistner, to use route navigation.
         */
        "routeNavigation"?: boolean;
        /**
          * The tab's size.
         */
        "tabSize"?: 'small' | 'medium' | 'large';
    }
    interface GrTabPanel {
        "active"?: boolean;
        "name"?: string;
    }
    interface GrTag {
        /**
          * Set to true to make the tag clearable.
         */
        "clearable"?: boolean;
        /**
          * Emitted when the clear button is activated.
         */
        "onGr-clear"?: (event: GrTagCustomEvent<void>) => void;
        /**
          * Set to true to draw a pill-style tag with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The tag's title.
         */
        "title"?: string;
        /**
          * Set to true to make the tag truncated.
         */
        "truncate"?: boolean;
        /**
          * The tag's type.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface GrTextarea {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize"?: string;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * Set to true to disable the textarea.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * The textarea's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * Set to true to indicate this field is invalid. Will display the invalid text instead of the help text
         */
        "invalid"?: boolean;
        /**
          * The input's invalid text. Alternatively, you can use the invalid-text slot.
         */
        "invalidText"?: string;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label"?: string | undefined;
        /**
          * The number of max rows
         */
        "maxHeight"?: number;
        /**
          * Specifies how many characters are allowed.
         */
        "maxlength"?: number;
        /**
          * The textarea's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the textarea loses focus.
         */
        "onGr-blur"?: (event: GrTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea's value changes.
         */
        "onGr-change"?: (event: GrTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea has focus.
         */
        "onGr-focus"?: (event: GrTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea receives input.
         */
        "onGr-input"?: (event: GrTextareaCustomEvent<void>) => void;
        /**
          * The textarea's placeholder text.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * Set to true to display a required indicator, adds an asterisk to label
         */
        "requiredIndicator"?: boolean;
        /**
          * Controls how the textarea can be resized.
         */
        "resize"?: 'none' | 'vertical' | 'auto';
        /**
          * The number of rows to display by default.
         */
        "rows"?: number;
        /**
          * The textarea's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * The textarea's value attribute.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "gr-button": GrButton;
        "gr-checkbox": GrCheckbox;
        "gr-date-picker": GrDatePicker;
        "gr-dropdown": GrDropdown;
        "gr-field-group": GrFieldGroup;
        "gr-input": GrInput;
        "gr-menu": GrMenu;
        "gr-menu-divider": GrMenuDivider;
        "gr-menu-item": GrMenuItem;
        "gr-menu-label": GrMenuLabel;
        "gr-radio": GrRadio;
        "gr-radio-group": GrRadioGroup;
        "gr-select": GrSelect;
        "gr-spinner": GrSpinner;
        "gr-tab": GrTab;
        "gr-tab-group": GrTabGroup;
        "gr-tab-panel": GrTabPanel;
        "gr-tag": GrTag;
        "gr-textarea": GrTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gr-button": LocalJSX.GrButton & JSXBase.HTMLAttributes<HTMLGrButtonElement>;
            "gr-checkbox": LocalJSX.GrCheckbox & JSXBase.HTMLAttributes<HTMLGrCheckboxElement>;
            "gr-date-picker": LocalJSX.GrDatePicker & JSXBase.HTMLAttributes<HTMLGrDatePickerElement>;
            "gr-dropdown": LocalJSX.GrDropdown & JSXBase.HTMLAttributes<HTMLGrDropdownElement>;
            "gr-field-group": LocalJSX.GrFieldGroup & JSXBase.HTMLAttributes<HTMLGrFieldGroupElement>;
            "gr-input": LocalJSX.GrInput & JSXBase.HTMLAttributes<HTMLGrInputElement>;
            "gr-menu": LocalJSX.GrMenu & JSXBase.HTMLAttributes<HTMLGrMenuElement>;
            "gr-menu-divider": LocalJSX.GrMenuDivider & JSXBase.HTMLAttributes<HTMLGrMenuDividerElement>;
            "gr-menu-item": LocalJSX.GrMenuItem & JSXBase.HTMLAttributes<HTMLGrMenuItemElement>;
            "gr-menu-label": LocalJSX.GrMenuLabel & JSXBase.HTMLAttributes<HTMLGrMenuLabelElement>;
            "gr-radio": LocalJSX.GrRadio & JSXBase.HTMLAttributes<HTMLGrRadioElement>;
            "gr-radio-group": LocalJSX.GrRadioGroup & JSXBase.HTMLAttributes<HTMLGrRadioGroupElement>;
            "gr-select": LocalJSX.GrSelect & JSXBase.HTMLAttributes<HTMLGrSelectElement>;
            "gr-spinner": LocalJSX.GrSpinner & JSXBase.HTMLAttributes<HTMLGrSpinnerElement>;
            "gr-tab": LocalJSX.GrTab & JSXBase.HTMLAttributes<HTMLGrTabElement>;
            "gr-tab-group": LocalJSX.GrTabGroup & JSXBase.HTMLAttributes<HTMLGrTabGroupElement>;
            "gr-tab-panel": LocalJSX.GrTabPanel & JSXBase.HTMLAttributes<HTMLGrTabPanelElement>;
            "gr-tag": LocalJSX.GrTag & JSXBase.HTMLAttributes<HTMLGrTagElement>;
            "gr-textarea": LocalJSX.GrTextarea & JSXBase.HTMLAttributes<HTMLGrTextareaElement>;
        }
    }
}
